import React, { useState, useEffect } from 'react';
import 'firebase/auth';
import 'firebase/compat/firestore';
import { Link } from 'react-router-dom';
import {
    collection,

    onSnapshot
} from "firebase/firestore";

import firebase from "firebase/compat/app";
import "firebase/compat/auth";
import "firebase/compat/firestore";

import './userspage.css'

export default function UsersList() {
    // Initialize state variables
    const [users, SU] = useState([]);
    const [sales, SS] = useState([]);

    const [employeetotalsales, SETS] = useState({})
 

    // Initialize the Firestore instance
    const db = firebase.firestore();

    // Listen for changes in the sales collection and update the sales state
    useEffect(() => {
        const DA = onSnapshot(collection(db, "sales"), (snapshot) => {
            const salesdata = snapshot.docs.map((doc) => {
                return {
                    id: doc.id,
                    ...doc.data(),
                };
            });
            SS(salesdata);
        });

        return () => DA();
    }, [db]);

    // Handle user authentication state changes
    useEffect(() => {
        const DA = firebase.auth().onAuthStateChanged(async (user) => {
            if (user) {
                const usersreference = db.collection('users');
                const snapshot = await usersreference.get();
                const usersdata = snapshot.docs.map((doc) => ({
                    id: doc.id,
                    ...doc.data(),
                }));
                SU(usersdata);


// Calculate the total sales generated by each employee
const salesdata = sales.reduce((acc, sale) => {
    // Extract employeeId and amountGenerated from the current sale object
    const employeeId = sale.employeeId;
    const amountGenerated = sale.amountGenerated;

    // Check if both employeeId and amountGenerated are defined and not falsy
    if (employeeId && amountGenerated) {
        // Check if the employeeId already exists in the accumulator object
        if (acc[employeeId]) {
            // If it exists, add the amountGenerated to the existing value
            acc[employeeId] += amountGenerated;
        } else {
            // If it doesn't exist, create a new key with the employeeId and set its value to the amountGenerated
            acc[employeeId] = amountGenerated;
        }
    }

    // Return the updated accumulator object for the next iteration
    return acc;
}, {}); // Initialize the accumulator with an empty object

// Call the SETS function with the salesdata object as its argument (the function is not defined in this snippet)
SETS(salesdata);

            }
        });
        return DA;
    }, [db, sales]);

    // Delete a user and remove their sales data
    const handledeleteuser = async (userId, email, employeeId) => {
        const db = firebase.firestore();
        const auth = firebase.auth();

        try {
            // Delete user from Firestore and Firebase Authentication
            await db.collection('users').doc(userId).delete();
            await auth.currentUser.delete();

            // Update the users and employeetotalsales states
            SU(users.filter((user) => user.id !== userId));
            SETS((prevstate) => {
                const newstate = { ...prevstate };
                delete newstate[employeeId];
                return newstate;
            });
        } catch (error) {
            console.log('Error deleting user:', error);
        }
    };

    return (
        <div className="userspage">
            <h1>All Users</h1>
            {users.map((user) => (
                <div key={user.id} className="user-card">
                    <p>Email: {user.email}</p>
                    <p>Name: {user.name} {user.lastName}</p>
                    <p>Role: {user.role}</p>
                    <p>Employee ID: {user.employeeId}</p>
                    {employeetotalsales[user.employeeId] && (
                        <p>Total Sales: Â£{employeetotalsales[user.employeeId]}</p>
                    )}
                    {firebase.auth().currentUser &&
                        firebase.auth().currentUser.email === user.email && (
                            <div className="actions">
                                <button onClick={() => handledeleteuser(user.id, user.email, user.employeeId)}>Delete</button>
                                <Link to="/profile">Edit Profile</Link>
                            </div>
                        )}
                    <hr className="hr1" />
                </div>
            ))}
        </div>
    );
}
